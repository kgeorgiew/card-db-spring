<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.kgeorgiew</groupId>
    <artifactId>card-db-spring</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>card-db-spring</name>
    <description>Card database rest api</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <org.jooq.version>3.8.6</org.jooq.version>
        <mysql.version>6.0.5</mysql.version>
        <h2.version>1.4.193</h2.version>
        <hikaricp.version>2.5.1</hikaricp.version>
        <junitparams.version>1.0.5</junitparams.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>${org.jooq.version}</version>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>

        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>${hikaricp.version}</version>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>pl.pragmatists</groupId>
            <artifactId>JUnitParams</artifactId>
            <version>${junitparams.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <compilerArgs>
                        <arg>-Xlint:all</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>src/test/resources/application.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- TODO How to run only for tests? -->
            <plugin>
                <!-- The H2 test schema is loaded here -->

                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <version>1.5</version>

                <dependencies>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>${h2.version}</version>
                    </dependency>
                </dependencies>

                <configuration>
                    <!--all executions are ignored if -Dmaven.test.skip=true-->
                    <skip>${maven.test.skip}</skip>
                    <forkMode>always</forkMode>
                </configuration>

                <executions>
                    <execution>
                        <id>create-database</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <driver>${spring.datasource.driverClassName}</driver>
                            <url>${spring.datasource.url}</url>
                            <username>${spring.datasource.username}</username>
                            <password>${spring.datasource.password}</password>
                            <!-- You can comment out username/password configurations and
                                 have maven to look them up in your settings.xml using ${settingsKey}
                            -->
                            <settingsKey>sensibleKey</settingsKey>

                            <autocommit>true</autocommit>
                            <srcFiles>
                                <srcFile>src/main/resources/schema.sql</srcFile>
                            </srcFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- TODO Run only on install command? -->
            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>${org.jooq.version}</version>

                <executions>
                    <execution>
                        <id>generate-database-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <dependencies>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>${h2.version}</version>
                    </dependency>

                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>${mysql.version}</version>
                    </dependency>
                </dependencies>

                <configuration>
                    <jdbc>
                        <driver>${spring.datasource.driverClassName}</driver>
                        <url>${spring.datasource.url}</url>
                        <user>${spring.datasource.username}</user>
                        <password>${spring.datasource.password}</password>
                    </jdbc>
                    <generator>
                        <strategy>
                            <matchers>
                                <tables>
                                    <table>
                                        <!-- Expression is omitted. This will make this rule apply to all tables -->
                                        <tableClass>
                                            <transform>PASCAL</transform>
                                            <expression>T_$0</expression>
                                        </tableClass>
                                    </table>
                                </tables>
                            </matchers>
                        </strategy>
                        <database>
                            <name>${spring.jooq.database.type}</name>
                            <includes>.*</includes>
                            <inputSchema>${spring.jooq.database.schema}</inputSchema>
                            <customTypes>
                                <customType>
                                    <name>ZonedDateTime</name>
                                    <type>java.time.ZonedDateTime</type>
                                    <converter>de.kgeorgiew.converter.ZonedDateTimeConverter</converter>
                                </customType>
                            </customTypes>
                            <forcedTypes>
                                <forcedType>
                                    <name>ZonedDateTime</name>
                                    <expression>created</expression>
                                </forcedType>
                                <forcedType>
                                    <name>ZonedDateTime</name>
                                    <expression>updated</expression>
                                </forcedType>
                            </forcedTypes>

                        </database>
                        <generate>
                            <!-- Generate deprecated code for backwards compatibility
                                  Defaults to true -->
                            <deprecated>false</deprecated>

                            <!-- Generate immutable POJOs for usage of the ResultQuery.fetchInto(Class) API
                                 This overrides any value set in <pojos/>
                                 Defaults to false -->
                            <immutablePojos>false</immutablePojos>

                            <!-- Generate interfaces that will be implemented by records and/or pojos.
                                 You can also use these interfaces in Record.into(Class<?>) and similar
                                 methods, to let jOOQ return proxy objects for them.
                                 Defaults to false -->
                            <interfaces>false</interfaces>

                            <!-- Generate DAOs in addition to POJO classes
                                 Defaults to false -->

                            <!-- Primary key / foreign key relations should be generated and used.
                                 This is a prerequisite for various advanced features.
                                 Defaults to true -->
                            <relations>true</relations>

                            <!-- Generate jOOQ Record classes for type-safe querying. You can
                                 turn this off, if you don't need "active records" for CRUD
                                 Defaults to true -->
                            <records>false</records>

                            <!-- Generate POJOs in addition to Record classes for usage of the
                                 ResultQuery.fetchInto(Class) API
                                 Defaults to false -->
                            <pojos>false</pojos>

                            <!-- Annotate POJOs and Records with JPA annotations for increased
                                 compatibility and better integration with JPA/Hibernate, etc
                                 Defaults to false -->
                            <jpaAnnotations>false</jpaAnnotations>

                            <!-- Annotate POJOs and Records with JSR-303 validation annotations
                                 Defaults to false -->
                            <validationAnnotations>false</validationAnnotations>

                            <!-- Annotate DAOs with useful spring annotations such as @Repository or @Autowired
                                 Defaults to false -->
                            <springAnnotations>true</springAnnotations>

                            <!-- Allow to turn off the generation of global object references, which include

                                 - Tables.java
                                 - Sequences.java
                                 - UDTs.java

                                 Turning off the generation of the above files may be necessary for very
                                 large schemas, which exceed the amount of allowed constants in a class's
                                 constant pool (64k) or, whose static initialiser would exceed 64k of
                                 byte code

                                 Defaults to true -->
                            <globalObjectReferences>true</globalObjectReferences>

                            <!-- Generate fluent setters in

                                 - records
                                 - pojos
                                 - interfaces

                                 Fluent setters are against the JavaBeans specification, but can be quite
                                 useful to those users who do not depend on EL, JSP, JSF, etc.

                                 Defaults to false -->
                            <fluentSetters>true</fluentSetters>
                        </generate>
                        <target>
                            <packageName>de.kgeorgiew.domain.jooq</packageName>
                            <directory>target/generated-sources/jooq</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

</project>
